from datetime import datetime
import pyqtgraph as pg
from PyQt6.QtWidgets import QWidget, QLabel, QVBoxLayout, QPushButton, QLineEdit
from ibapi.contract import Contract

from gui import styling
from ibapi_connections.contract_data import req_contract_from_symbol
from ibapi_connections.market_data import get_market_data_graph


class StockGraphWidget(QWidget):
    def __init__(self, app):
        super().__init__()
        self.app = app

        # widgets added to layout
        widget_label = QLabel("View Graphs of Market Data")

        # stock input for graph
        self.stock_symbol_input = QLineEdit()

        # test button for graphs
        get_graphs_button = QPushButton("Get Graphs")
        get_graphs_button.clicked.connect(self.create_candlestick_graph)

        # graph widget
        self.market_data_graph = pg.PlotWidget()
        self.market_data_graph.showGrid(x=True, y=True)
        self.market_data_graph.setTitle("Historical Close Prices")
        self.market_data_graph.setLabel("left", "Price")
        self.market_data_graph.setLabel("bottom", "Date")

        # layout
        layout = QVBoxLayout()
        layout.addWidget(widget_label)
        layout.addWidget(self.stock_symbol_input)
        layout.addWidget(get_graphs_button)
        layout.addWidget(self.market_data_graph)

        self.setLayout(layout)

        # fonts/styling
        widget_label.setFont(styling.heading_font)


    # generated by ChatGPT
    def create_candlestick_graph(self):
        symbol = self.stock_symbol_input.text()
        contract: Contract = req_contract_from_symbol(self.app, symbol)
        data = get_market_data_graph(self.app, contract)

        self.market_data_graph.clear()

        x_axis = []
        axis_dates = []

        for i, bar in enumerate(data):
            candle_width = 0.6
            top = max(bar.open, bar.close)
            bottom = min(bar.open, bar.close)

            # Body (rectangle)
            rect = pg.QtWidgets.QGraphicsRectItem(i - candle_width / 2, bottom, candle_width, top - bottom)
            color = pg.mkColor('g') if bar.close >= bar.open else pg.mkColor('r')
            rect.setPen(pg.mkPen(color))
            rect.setBrush(pg.mkBrush(color))
            self.market_data_graph.addItem(rect)

            # Wick (line from low to high)
            wick = pg.PlotDataItem(x=[i, i], y=[bar.low, bar.high], pen=pg.mkPen(color, width=1))
            self.market_data_graph.addItem(wick)

            # Track x-labels
            x_axis.append(i)
            axis_dates.append(bar.date)

        # Apply x-axis date labels
        string_axis = pg.AxisItem(orientation='bottom')
        ticks = [
            (i, datetime.strptime(bar.date, "%Y%m%d").strftime("%b %d"))
            for i, bar in enumerate(data)
        ]
        string_axis.setTicks([ticks])
        self.market_data_graph.getAxis('bottom').setTicks([ticks])
        self.market_data_graph.enableAutoRange()